package com.cars24.slack_hrbp.request;

import com.cars24.slack_hrbp.data.request.CreateEmployeeRequest;
import jakarta.persistence.Column;
import jakarta.validation.ConstraintViolation;
import jakarta.validation.Validation;
import jakarta.validation.Validator;
import jakarta.validation.ValidatorFactory;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotNull;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.Arrays;
import java.util.List;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.*;

class CreateEmployeeRequestTest {

    private CreateEmployeeRequest createEmployeeRequest;
    private Validator validator;

    @BeforeEach
    void setUp() {
        createEmployeeRequest = new CreateEmployeeRequest();

        // Setup validator for bean validation
        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
        validator = factory.getValidator();
    }

    @Test
    void testSetAndGetEmail() {
        String testEmail = "john.doe@example.com";
        createEmployeeRequest.setEmail(testEmail);
        assertEquals(testEmail, createEmployeeRequest.getEmail());
    }

    @Test
    void testSetAndGetRoles() {
        List<String> testRoles = Arrays.asList("ADMIN", "USER");
        createEmployeeRequest.setRoles(testRoles);
        assertEquals(testRoles, createEmployeeRequest.getRoles());
    }

    @Test
    void testSetAndGetManagerEmail() {
        String testManagerEmail = "manager@example.com";
        createEmployeeRequest.setManagerEmail(testManagerEmail);
        assertEquals(testManagerEmail, createEmployeeRequest.getManagerEmail());
    }

    @Test
    void testFullConstructorAndGetters() {
        // Create a fully populated CreateEmployeeRequest
        CreateEmployeeRequest fullRequest = new CreateEmployeeRequest();
        fullRequest.setEmail("john.doe@example.com");
        fullRequest.setRoles(Arrays.asList("ADMIN", "USER"));
        fullRequest.setManagerEmail("manager@example.com");

        // Verify all getters
        assertEquals("john.doe@example.com", fullRequest.getEmail());
        assertEquals(Arrays.asList("ADMIN", "USER"), fullRequest.getRoles());
        assertEquals("manager@example.com", fullRequest.getManagerEmail());
    }

    @Test
    void testToString() {
        // Verify that toString() is generated by Lombok
        CreateEmployeeRequest fullRequest = new CreateEmployeeRequest();
        fullRequest.setEmail("john.doe@example.com");
        fullRequest.setRoles(Arrays.asList("ADMIN", "USER"));
        fullRequest.setManagerEmail("manager@example.com");

        String toStringResult = fullRequest.toString();
        assertNotNull(toStringResult);
        assertTrue(toStringResult.contains("email=john.doe@example.com"));
        assertTrue(toStringResult.contains("roles=[ADMIN, USER]"));
        assertTrue(toStringResult.contains("managerEmail=manager@example.com"));
    }

    @Test
    void testEqualsAndHashCode() {
        CreateEmployeeRequest request1 = new CreateEmployeeRequest();
        request1.setEmail("john.doe@example.com");
        request1.setRoles(Arrays.asList("ADMIN", "USER"));

        CreateEmployeeRequest request2 = new CreateEmployeeRequest();
        request2.setEmail("john.doe@example.com");
        request2.setRoles(Arrays.asList("ADMIN", "USER"));

        CreateEmployeeRequest request3 = new CreateEmployeeRequest();
        request3.setEmail("different@example.com");

        // Test equals
        assertEquals(request1, request2);
        assertNotEquals(request1, request3);

        // Test hashCode
        assertEquals(request1.hashCode(), request2.hashCode());
        assertNotEquals(request1.hashCode(), request3.hashCode());
    }

    @Test
    void testValidations() {
        // Test email validation
        CreateEmployeeRequest invalidEmailRequest = new CreateEmployeeRequest();
        invalidEmailRequest.setEmail("invalid-email");
        invalidEmailRequest.setRoles(List.of("USER"));

        Set<ConstraintViolation<CreateEmployeeRequest>> emailViolations = validator.validate(invalidEmailRequest);
        assertFalse(emailViolations.isEmpty());
        assertTrue(emailViolations.stream()
                .anyMatch(v -> v.getMessage().equals("Please provide a valid email address")));

        // Test null email validation
        CreateEmployeeRequest nullEmailRequest = new CreateEmployeeRequest();
        nullEmailRequest.setRoles(List.of("USER"));

        Set<ConstraintViolation<CreateEmployeeRequest>> nullEmailViolations = validator.validate(nullEmailRequest);
        assertFalse(nullEmailViolations.isEmpty());
        assertTrue(nullEmailViolations.stream()
                .anyMatch(v -> v.getMessage().equals("Email cannot be null")));

        // Test valid request
        CreateEmployeeRequest validRequest = new CreateEmployeeRequest();
        validRequest.setEmail("john.doe@example.com");
        validRequest.setRoles(List.of("USER"));

        Set<ConstraintViolation<CreateEmployeeRequest>> validViolations = validator.validate(validRequest);
        assertTrue(validViolations.isEmpty());
    }

    @Test
    void testAnnotations() {

        // Verify field annotations
        try {
            // Check email field annotations
            assertNotNull(CreateEmployeeRequest.class.getDeclaredField("email").getAnnotation(NotNull.class));
            assertNotNull(CreateEmployeeRequest.class.getDeclaredField("email").getAnnotation(Email.class));

            // Check roles field annotations
            assertNotNull(CreateEmployeeRequest.class.getDeclaredField("roles").getAnnotation(NotNull.class));

            // Check managerEmail field annotations
            assertNotNull(CreateEmployeeRequest.class.getDeclaredField("managerEmail").getAnnotation(Column.class));
            assertNotNull(CreateEmployeeRequest.class.getDeclaredField("managerEmail").getAnnotation(Email.class));
        } catch (NoSuchFieldException e) {
            fail("Expected fields not found");
        }
    }
}