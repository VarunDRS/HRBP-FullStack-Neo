package com.cars24.slack_hrbp.entitiy;

import com.cars24.slack_hrbp.data.entity.EmployeeEntity;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class EmployeeEntityTest {

    private EmployeeEntity employeeEntity;

    @BeforeEach
    void setUp() {
        employeeEntity = new EmployeeEntity();
    }

    @Test
    void testSetAndGetId() {
        String testId = "emp123";
        employeeEntity.setId(testId);
        assertEquals(testId, employeeEntity.getId());
    }

    @Test
    void testSetAndGetUserId() {
        String testUserId = "user456";
        employeeEntity.setUserId(testUserId);
        assertEquals(testUserId, employeeEntity.getUserId());
    }

    @Test
    void testSetAndGetUsername() {
        String testUsername = "johndoe";
        employeeEntity.setUsername(testUsername);
        assertEquals(testUsername, employeeEntity.getUsername());
    }

    @Test
    void testSetAndGetEmail() {
        String testEmail = "john.doe@example.com";
        employeeEntity.setEmail(testEmail);
        assertEquals(testEmail, employeeEntity.getEmail());
    }

    @Test
    void testSetAndGetEncryptedPassword() {
        String testPassword = "hashedPassword123";
        employeeEntity.setEncryptedPassword(testPassword);
        assertEquals(testPassword, employeeEntity.getEncryptedPassword());
    }

    @Test
    void testSetAndGetManagerDetails() {
        String testManagerName = "Jane Smith";
        String testManagerId = "mgr789";

        employeeEntity.setManagerName(testManagerName);
        employeeEntity.setManagerId(testManagerId);

        assertEquals(testManagerName, employeeEntity.getManagerName());
        assertEquals(testManagerId, employeeEntity.getManagerId());
    }

    @Test
    void testSetAndGetRoles() {
        List<String> testRoles = new ArrayList<>();
        testRoles.add("ADMIN");
        testRoles.add("USER");

        employeeEntity.setRoles(testRoles);

        assertEquals(testRoles, employeeEntity.getRoles());
    }

    @Test
    void testSetAndGetManager() {
        EmployeeEntity managerEntity = new EmployeeEntity();
        managerEntity.setId("mgr789");
        managerEntity.setUsername("Jane Smith");

        employeeEntity.setManager(managerEntity);

        assertEquals(managerEntity, employeeEntity.getManager());
    }

    @Test
    void testFullConstructorAndGetters() {
        // Create a fully populated EmployeeEntity
        EmployeeEntity fullEntity = new EmployeeEntity();
        fullEntity.setId("emp123");
        fullEntity.setUserId("user456");
        fullEntity.setUsername("johndoe");
        fullEntity.setEmail("john.doe@example.com");
        fullEntity.setEncryptedPassword("hashedPassword123");
        fullEntity.setManagerName("Jane Smith");
        fullEntity.setManagerId("mgr789");

        List<String> roles = new ArrayList<>();
        roles.add("ADMIN");
        roles.add("USER");
        fullEntity.setRoles(roles);

        // Verify all getters
        assertEquals("emp123", fullEntity.getId());
        assertEquals("user456", fullEntity.getUserId());
        assertEquals("johndoe", fullEntity.getUsername());
        assertEquals("john.doe@example.com", fullEntity.getEmail());
        assertEquals("hashedPassword123", fullEntity.getEncryptedPassword());
        assertEquals("Jane Smith", fullEntity.getManagerName());
        assertEquals("mgr789", fullEntity.getManagerId());
        assertEquals(roles, fullEntity.getRoles());
    }

    @Test
    void testToString() {
        // Verify that toString() is generated by Lombok
        EmployeeEntity fullEntity = new EmployeeEntity();
        fullEntity.setId("emp123");
        fullEntity.setUserId("user456");
        fullEntity.setUsername("johndoe");
        fullEntity.setEmail("john.doe@example.com");

        String toStringResult = fullEntity.toString();
        assertNotNull(toStringResult);
        assertTrue(toStringResult.contains("id=emp123"));
        assertTrue(toStringResult.contains("userId=user456"));
        assertTrue(toStringResult.contains("username=johndoe"));
        assertTrue(toStringResult.contains("email=john.doe@example.com"));
    }

    @Test
    void testEqualsAndHashCode() {
        EmployeeEntity entity1 = new EmployeeEntity();
        entity1.setId("emp123");
        entity1.setUserId("user456");
        entity1.setEmail("john.doe@example.com");

        EmployeeEntity entity2 = new EmployeeEntity();
        entity2.setId("emp123");
        entity2.setUserId("user456");
        entity2.setEmail("john.doe@example.com");

        EmployeeEntity entity3 = new EmployeeEntity();
        entity3.setId("different");

        // Test equals
        assertEquals(entity1, entity2);
        assertNotEquals(entity1, entity3);

        // Test hashCode
        assertEquals(entity1.hashCode(), entity2.hashCode());
        assertNotEquals(entity1.hashCode(), entity3.hashCode());
    }
}