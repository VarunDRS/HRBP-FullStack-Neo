package com.cars24.slack_hrbp.request;

import com.cars24.slack_hrbp.data.request.PasswordUpdateRequest;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class PasswordUpdateRequestTest {
    private PasswordUpdateRequest passwordUpdateRequest;

    @BeforeEach
    void setUp() {
        passwordUpdateRequest = new PasswordUpdateRequest();
    }

    @Test
    void testSetAndGetNewPassword() {
        String testPassword = "newSecurePassword123";
        passwordUpdateRequest.setNewPassword(testPassword);
        assertEquals(testPassword, passwordUpdateRequest.getNewPassword());
    }

    @Test
    void testSetAndGetUserId() {
        String testUserId = "user123";
        passwordUpdateRequest.setUserId(testUserId);
        assertEquals(testUserId, passwordUpdateRequest.getUserId());
    }

    @Test
    void testFullConstructorAndGetters() {
        // Create a fully populated PasswordUpdateRequest
        PasswordUpdateRequest fullRequest = new PasswordUpdateRequest();
        fullRequest.setNewPassword("newSecurePassword123");
        fullRequest.setUserId("user123");

        // Verify all getters
        assertEquals("newSecurePassword123", fullRequest.getNewPassword());
        assertEquals("user123", fullRequest.getUserId());
    }

    @Test
    void testToString() {
        // Verify that toString() is generated by Lombok
        PasswordUpdateRequest fullRequest = new PasswordUpdateRequest();
        fullRequest.setNewPassword("newSecurePassword123");
        fullRequest.setUserId("user123");

        String toStringResult = fullRequest.toString();
        assertNotNull(toStringResult);
        assertTrue(toStringResult.contains("newPassword=newSecurePassword123"));
        assertTrue(toStringResult.contains("userId=user123"));
    }

    @Test
    void testEqualsAndHashCode() {
        PasswordUpdateRequest request1 = new PasswordUpdateRequest();
        request1.setNewPassword("newSecurePassword123");
        request1.setUserId("user123");

        PasswordUpdateRequest request2 = new PasswordUpdateRequest();
        request2.setNewPassword("newSecurePassword123");
        request2.setUserId("user123");

        PasswordUpdateRequest request3 = new PasswordUpdateRequest();
        request3.setNewPassword("differentPassword");
        request3.setUserId("differentUser");

        // Test equals
        assertEquals(request1, request2);
        assertNotEquals(request1, request3);

        // Test hashCode
        assertEquals(request1.hashCode(), request2.hashCode());
        assertNotEquals(request1.hashCode(), request3.hashCode());
    }

    @Test
    void testNullValues() {
        // Test setting null new password
        passwordUpdateRequest.setNewPassword(null);
        assertNull(passwordUpdateRequest.getNewPassword());

        // Test setting null user ID
        passwordUpdateRequest.setUserId(null);
        assertNull(passwordUpdateRequest.getUserId());
    }

    @Test
    void testEmptyStringValues() {
        // Test setting empty new password
        passwordUpdateRequest.setNewPassword("");
        assertEquals("", passwordUpdateRequest.getNewPassword());

        // Test setting empty user ID
        passwordUpdateRequest.setUserId("");
        assertEquals("", passwordUpdateRequest.getUserId());
    }
}