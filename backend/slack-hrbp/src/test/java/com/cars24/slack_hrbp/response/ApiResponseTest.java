package com.cars24.slack_hrbp.response;

import com.cars24.slack_hrbp.data.response.ApiResponse;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class ApiResponseTest {
    private ApiResponse apiResponse;

    @BeforeEach
    void setUp() {
        apiResponse = new ApiResponse();
    }

    @Test
    void testSetAndGetStatusCode() {
        int testStatusCode = 200;
        apiResponse.setStatuscode(testStatusCode);
        assertEquals(testStatusCode, apiResponse.getStatuscode());
    }

    @Test
    void testSetAndGetSuccess() {
        boolean testSuccess = true;
        apiResponse.setSuccess(testSuccess);
        assertEquals(testSuccess, apiResponse.isSuccess());
    }

    @Test
    void testSetAndGetMessage() {
        String testMessage = "Operation successful";
        apiResponse.setMessage(testMessage);
        assertEquals(testMessage, apiResponse.getMessage());
    }

    @Test
    void testSetAndGetData() {
        Object testData = new Object();
        apiResponse.setData(testData);
        assertEquals(testData, apiResponse.getData());
    }

    @Test
    void testSetAndGetService() {
        String testService = "user-service";
        apiResponse.setService(testService);
        assertEquals(testService, apiResponse.getService());
    }

    @Test
    void testFullConstructorAndGetters() {
        // Create a fully populated ApiResponse
        ApiResponse fullResponse = new ApiResponse();
        fullResponse.setStatuscode(200);
        fullResponse.setSuccess(true);
        fullResponse.setMessage("Operation successful");
        fullResponse.setData("Sample data");
        fullResponse.setService("user-service");

        // Verify all getters
        assertEquals(200, fullResponse.getStatuscode());
        assertTrue(fullResponse.isSuccess());
        assertEquals("Operation successful", fullResponse.getMessage());
        assertEquals("Sample data", fullResponse.getData());
        assertEquals("user-service", fullResponse.getService());
    }

    @Test
    void testToString() {
        // Verify that toString() is generated by Lombok
        ApiResponse fullResponse = new ApiResponse();
        fullResponse.setStatuscode(200);
        fullResponse.setSuccess(true);
        fullResponse.setMessage("Operation successful");
        fullResponse.setData("Sample data");
        fullResponse.setService("user-service");

        String toStringResult = fullResponse.toString();
        assertNotNull(toStringResult);
        assertTrue(toStringResult.contains("statuscode=200"));
        assertTrue(toStringResult.contains("success=true"));
        assertTrue(toStringResult.contains("message=Operation successful"));
        assertTrue(toStringResult.contains("data=Sample data"));
        assertTrue(toStringResult.contains("service=user-service"));
    }

    @Test
    void testEqualsAndHashCode() {
        ApiResponse response1 = new ApiResponse();
        response1.setStatuscode(200);
        response1.setSuccess(true);
        response1.setMessage("Operation successful");
        response1.setData("Sample data");
        response1.setService("user-service");

        ApiResponse response2 = new ApiResponse();
        response2.setStatuscode(200);
        response2.setSuccess(true);
        response2.setMessage("Operation successful");
        response2.setData("Sample data");
        response2.setService("user-service");

        ApiResponse response3 = new ApiResponse();
        response3.setStatuscode(404);
        response3.setSuccess(false);
        response3.setMessage("Not found");
        response3.setData(null);
        response3.setService("error-service");

        // Test equals
        assertEquals(response1, response2);
        assertNotEquals(response1, response3);

        // Test hashCode
        assertEquals(response1.hashCode(), response2.hashCode());
        assertNotEquals(response1.hashCode(), response3.hashCode());
    }

    @Test
    void testNullAndDefaultValues() {
        // Test setting null values
        apiResponse.setMessage(null);
        assertNull(apiResponse.getMessage());

        apiResponse.setData(null);
        assertNull(apiResponse.getData());

        apiResponse.setService(null);
        assertNull(apiResponse.getService());

        // Test default primitive values
        assertEquals(0, apiResponse.getStatuscode());
        assertFalse(apiResponse.isSuccess());
    }

    @Test
    void testDifferentDataTypes() {
        // Test with different data types
        ApiResponse stringDataResponse = new ApiResponse();
        stringDataResponse.setData("String data");
        assertEquals("String data", stringDataResponse.getData());

        ApiResponse intDataResponse = new ApiResponse();
        intDataResponse.setData(42);
        assertEquals(42, intDataResponse.getData());

        ApiResponse objectDataResponse = new ApiResponse();
        Object customObject = new Object();
        objectDataResponse.setData(customObject);
        assertEquals(customObject, objectDataResponse.getData());
    }
}