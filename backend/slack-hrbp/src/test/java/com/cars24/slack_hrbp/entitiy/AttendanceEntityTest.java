package com.cars24.slack_hrbp.entitiy;

import com.cars24.slack_hrbp.data.entity.AttendanceEntity;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class AttendanceEntityTest {

    private AttendanceEntity attendanceEntity;

    @BeforeEach
    void setUp() {
        attendanceEntity = new AttendanceEntity();
    }

    @Test
    void testSetAndGetId() {
        String testId = "test123";
        attendanceEntity.setId(testId);
        assertEquals(testId, attendanceEntity.getId());
    }

    @Test
    void testSetAndGetUserId() {
        String testUserId = "user456";
        attendanceEntity.setUserid(testUserId);
        assertEquals(testUserId, attendanceEntity.getUserid());
    }

    @Test
    void testSetAndGetUsername() {
        String testUsername = "John Doe";
        attendanceEntity.setUsername(testUsername);
        assertEquals(testUsername, attendanceEntity.getUsername());
    }

    @Test
    void testSetAndGetDate() {
        String testDate = "2024-03-28";
        attendanceEntity.setDate(testDate);
        assertEquals(testDate, attendanceEntity.getDate());
    }

    @Test
    void testSetAndGetReason() {
        String testReason = "Annual Leave";
        attendanceEntity.setReason(testReason);
        assertEquals(testReason, attendanceEntity.getReason());
    }

    @Test
    void testSetAndGetType() {
        String testType = "Planned Leave";
        attendanceEntity.setType(testType);
        assertEquals(testType, attendanceEntity.getType());
    }

    @Test
    void testFullConstructor() {
        String testId = "test123";
        String testUserId = "user456";
        String testUsername = "John Doe";
        String testDate = "2024-03-28";
        String testReason = "Annual Leave";
        String testType = "Planned Leave";

        AttendanceEntity fullEntity = new AttendanceEntity();
        fullEntity.setId(testId);
        fullEntity.setUserid(testUserId);
        fullEntity.setUsername(testUsername);
        fullEntity.setDate(testDate);
        fullEntity.setReason(testReason);
        fullEntity.setType(testType);

        assertEquals(testId, fullEntity.getId());
        assertEquals(testUserId, fullEntity.getUserid());
        assertEquals(testUsername, fullEntity.getUsername());
        assertEquals(testDate, fullEntity.getDate());
        assertEquals(testReason, fullEntity.getReason());
        assertEquals(testType, fullEntity.getType());
    }

    @Test
    void testToString() {
        // Verify that toString() is generated by Lombok
        String testId = "test123";
        String testUserId = "user456";
        String testUsername = "John Doe";
        String testDate = "2024-03-28";
        String testReason = "Annual Leave";
        String testType = "Planned Leave";

        AttendanceEntity fullEntity = new AttendanceEntity();
        fullEntity.setId(testId);
        fullEntity.setUserid(testUserId);
        fullEntity.setUsername(testUsername);
        fullEntity.setDate(testDate);
        fullEntity.setReason(testReason);
        fullEntity.setType(testType);

        String toStringResult = fullEntity.toString();
        assertNotNull(toStringResult);
        assertTrue(toStringResult.contains("id=" + testId));
        assertTrue(toStringResult.contains("userid=" + testUserId));
        assertTrue(toStringResult.contains("username=" + testUsername));
        assertTrue(toStringResult.contains("date=" + testDate));
        assertTrue(toStringResult.contains("reason=" + testReason));
        assertTrue(toStringResult.contains("type=" + testType));
    }

    @Test
    void testEqualsAndHashCode() {
        AttendanceEntity entity1 = new AttendanceEntity();
        entity1.setId("test123");
        entity1.setUserid("user456");

        AttendanceEntity entity2 = new AttendanceEntity();
        entity2.setId("test123");
        entity2.setUserid("user456");

        AttendanceEntity entity3 = new AttendanceEntity();
        entity3.setId("different");

        // Test equals
        assertEquals(entity1, entity2);
        assertNotEquals(entity1, entity3);

        // Test hashCode
        assertEquals(entity1.hashCode(), entity2.hashCode());
        assertNotEquals(entity1.hashCode(), entity3.hashCode());
    }
}