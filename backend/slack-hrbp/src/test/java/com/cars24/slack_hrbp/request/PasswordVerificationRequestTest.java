package com.cars24.slack_hrbp.request;

import com.cars24.slack_hrbp.data.request.PasswordVerificationRequest;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class PasswordVerificationRequestTest {
    private PasswordVerificationRequest passwordVerificationRequest;

    @BeforeEach
    void setUp() {
        passwordVerificationRequest = new PasswordVerificationRequest();
    }

    @Test
    void testSetAndGetUserId() {
        String testUserId = "user123";
        passwordVerificationRequest.setUserId(testUserId);
        assertEquals(testUserId, passwordVerificationRequest.getUserId());
    }

    @Test
    void testSetAndGetPassword() {
        String testPassword = "currentPassword123";
        passwordVerificationRequest.setPassword(testPassword);
        assertEquals(testPassword, passwordVerificationRequest.getPassword());
    }

    @Test
    void testFullConstructorAndGetters() {
        // Create a fully populated PasswordVerificationRequest
        PasswordVerificationRequest fullRequest = new PasswordVerificationRequest();
        fullRequest.setUserId("user123");
        fullRequest.setPassword("currentPassword123");

        // Verify all getters
        assertEquals("user123", fullRequest.getUserId());
        assertEquals("currentPassword123", fullRequest.getPassword());
    }

    @Test
    void testToString() {
        // Verify that toString() is generated by Lombok
        PasswordVerificationRequest fullRequest = new PasswordVerificationRequest();
        fullRequest.setUserId("user123");
        fullRequest.setPassword("currentPassword123");

        String toStringResult = fullRequest.toString();
        assertNotNull(toStringResult);
        assertTrue(toStringResult.contains("userId=user123"));
        assertTrue(toStringResult.contains("password=currentPassword123"));
    }

    @Test
    void testEqualsAndHashCode() {
        PasswordVerificationRequest request1 = new PasswordVerificationRequest();
        request1.setUserId("user123");
        request1.setPassword("currentPassword123");

        PasswordVerificationRequest request2 = new PasswordVerificationRequest();
        request2.setUserId("user123");
        request2.setPassword("currentPassword123");

        PasswordVerificationRequest request3 = new PasswordVerificationRequest();
        request3.setUserId("differentUser");
        request3.setPassword("differentPassword");

        // Test equals
        assertEquals(request1, request2);
        assertNotEquals(request1, request3);

        // Test hashCode
        assertEquals(request1.hashCode(), request2.hashCode());
        assertNotEquals(request1.hashCode(), request3.hashCode());
    }

    @Test
    void testNullValues() {
        // Test setting null user ID
        passwordVerificationRequest.setUserId(null);
        assertNull(passwordVerificationRequest.getUserId());

        // Test setting null password
        passwordVerificationRequest.setPassword(null);
        assertNull(passwordVerificationRequest.getPassword());
    }

    @Test
    void testEmptyStringValues() {
        // Test setting empty user ID
        passwordVerificationRequest.setUserId("");
        assertEquals("", passwordVerificationRequest.getUserId());

        // Test setting empty password
        passwordVerificationRequest.setPassword("");
        assertEquals("", passwordVerificationRequest.getPassword());
    }
}