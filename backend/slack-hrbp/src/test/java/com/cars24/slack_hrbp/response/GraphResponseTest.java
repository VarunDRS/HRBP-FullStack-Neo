package com.cars24.slack_hrbp.response;

import com.cars24.slack_hrbp.data.response.GraphResponse;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import java.util.HashMap;
import java.util.Map;
import static org.junit.jupiter.api.Assertions.*;

class GraphResponseTest {
    private GraphResponse graphResponse;

    @BeforeEach
    void setUp() {
        graphResponse = new GraphResponse();
    }

    @Test
    void testSetAndGetTypeCounts() {
        // Create a test map
        Map<String, Integer> testTypeCounts = new HashMap<>();
        testTypeCounts.put("Leave", 5);
        testTypeCounts.put("WFH", 3);

        graphResponse.setTypeCounts(testTypeCounts);
        assertEquals(testTypeCounts, graphResponse.getTypeCounts());
    }

    @Test
    void testFullConstructorAndGetters() {
        // Create a fully populated GraphResponse
        GraphResponse fullResponse = new GraphResponse();
        Map<String, Integer> typeCounts = new HashMap<>();
        typeCounts.put("Leave", 5);
        typeCounts.put("WFH", 3);
        fullResponse.setTypeCounts(typeCounts);

        // Verify getters
        assertEquals(typeCounts, fullResponse.getTypeCounts());
        assertEquals(2, fullResponse.getTypeCounts().size());
        assertEquals(5, fullResponse.getTypeCounts().get("Leave"));
        assertEquals(3, fullResponse.getTypeCounts().get("WFH"));
    }

    @Test
    void testToString() {
        // Verify that toString() is generated by Lombok
        GraphResponse fullResponse = new GraphResponse();
        Map<String, Integer> typeCounts = new HashMap<>();
        typeCounts.put("Leave", 5);
        typeCounts.put("WFH", 3);
        fullResponse.setTypeCounts(typeCounts);

        String toStringResult = fullResponse.toString();
        assertNotNull(toStringResult);
        assertTrue(toStringResult.contains("typeCounts={Leave=5, WFH=3}")
                || toStringResult.contains("typeCounts={WFH=3, Leave=5}"));
    }

    @Test
    void testEqualsAndHashCode() {
        GraphResponse response1 = new GraphResponse();
        Map<String, Integer> typeCounts1 = new HashMap<>();
        typeCounts1.put("Leave", 5);
        typeCounts1.put("WFH", 3);
        response1.setTypeCounts(typeCounts1);

        GraphResponse response2 = new GraphResponse();
        Map<String, Integer> typeCounts2 = new HashMap<>();
        typeCounts2.put("Leave", 5);
        typeCounts2.put("WFH", 3);
        response2.setTypeCounts(typeCounts2);

        GraphResponse response3 = new GraphResponse();
        Map<String, Integer> typeCounts3 = new HashMap<>();
        typeCounts3.put("Meeting", 7);
        response3.setTypeCounts(typeCounts3);

        // Test equals
        assertEquals(response1, response2);
        assertNotEquals(response1, response3);

        // Test hashCode
        assertEquals(response1.hashCode(), response2.hashCode());
        assertNotEquals(response1.hashCode(), response3.hashCode());
    }


    @Test
    void testNullValues() {
        // Test setting null typeCounts
        graphResponse.setTypeCounts(null);
        assertNull(graphResponse.getTypeCounts());
    }

    @Test
    void testEmptyMap() {
        // Test setting an empty map
        Map<String, Integer> emptyMap = new HashMap<>();
        graphResponse.setTypeCounts(emptyMap);
        assertTrue(graphResponse.getTypeCounts().isEmpty());
    }

    @Test
    void testMapOperations() {
        // Test map with multiple operations
        GraphResponse response = new GraphResponse();
        Map<String, Integer> typeCounts = new HashMap<>();

        // Add entries
        typeCounts.put("Leave", 5);
        typeCounts.put("WFH", 3);
        response.setTypeCounts(typeCounts);

        // Verify entries
        assertEquals(5, response.getTypeCounts().get("Leave"));
        assertEquals(3, response.getTypeCounts().get("WFH"));

        // Remove an entry
        typeCounts.remove("WFH");
        response.setTypeCounts(typeCounts);
        assertNull(response.getTypeCounts().get("WFH"));
        assertEquals(1, response.getTypeCounts().size());
    }
}