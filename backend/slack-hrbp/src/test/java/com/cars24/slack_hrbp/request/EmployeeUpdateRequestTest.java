package com.cars24.slack_hrbp.request;

import com.cars24.slack_hrbp.data.request.EmployeeUpdateRequest;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class EmployeeUpdateRequestTest {

    private EmployeeUpdateRequest employeeUpdateRequest;

    @BeforeEach
    void setUp() {
        employeeUpdateRequest = new EmployeeUpdateRequest();
    }

    @Test
    void testSetAndGetUserId() {
        String testUserId = "user123";
        employeeUpdateRequest.setUserId(testUserId);
        assertEquals(testUserId, employeeUpdateRequest.getUserId());
    }

    @Test
    void testSetAndGetRoles() {
        List<String> testRoles = Arrays.asList("ADMIN", "USER");
        employeeUpdateRequest.setRoles(testRoles);
        assertEquals(testRoles, employeeUpdateRequest.getRoles());
    }

    @Test
    void testFullConstructorAndGetters() {
        // Create a fully populated EmployeeUpdateRequest
        EmployeeUpdateRequest fullRequest = new EmployeeUpdateRequest();
        fullRequest.setUserId("user123");
        fullRequest.setRoles(Arrays.asList("ADMIN", "USER"));

        // Verify all getters
        assertEquals("user123", fullRequest.getUserId());
        assertEquals(Arrays.asList("ADMIN", "USER"), fullRequest.getRoles());
    }

    @Test
    void testToString() {
        // Verify that toString() is generated by Lombok
        EmployeeUpdateRequest fullRequest = new EmployeeUpdateRequest();
        fullRequest.setUserId("user123");
        fullRequest.setRoles(Arrays.asList("ADMIN", "USER"));

        String toStringResult = fullRequest.toString();
        assertNotNull(toStringResult);
        assertTrue(toStringResult.contains("userId=user123"));
        assertTrue(toStringResult.contains("roles=[ADMIN, USER]"));
    }

    @Test
    void testEqualsAndHashCode() {
        EmployeeUpdateRequest request1 = new EmployeeUpdateRequest();
        request1.setUserId("user123");
        request1.setRoles(Arrays.asList("ADMIN", "USER"));

        EmployeeUpdateRequest request2 = new EmployeeUpdateRequest();
        request2.setUserId("user123");
        request2.setRoles(Arrays.asList("ADMIN", "USER"));

        EmployeeUpdateRequest request3 = new EmployeeUpdateRequest();
        request3.setUserId("different");

        // Test equals
        assertEquals(request1, request2);
        assertNotEquals(request1, request3);

        // Test hashCode
        assertEquals(request1.hashCode(), request2.hashCode());
        assertNotEquals(request1.hashCode(), request3.hashCode());
    }

    @Test
    void testNullAndEmptyRoles() {
        // Test setting null roles
        employeeUpdateRequest.setRoles(null);
        assertNull(employeeUpdateRequest.getRoles());

        // Test setting empty roles list
        List<String> emptyRoles = List.of();
        employeeUpdateRequest.setRoles(emptyRoles);
        assertTrue(employeeUpdateRequest.getRoles().isEmpty());
    }
}