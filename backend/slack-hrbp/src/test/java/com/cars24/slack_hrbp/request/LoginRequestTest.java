package com.cars24.slack_hrbp.request;

import com.cars24.slack_hrbp.data.request.LoginRequest;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class LoginRequestTest {
    private LoginRequest loginRequest;

    @BeforeEach
    void setUp() {
        loginRequest = new LoginRequest();
    }

    @Test
    void testSetAndGetEmail() {
        String testEmail = "user@example.com";
        loginRequest.setEmail(testEmail);
        assertEquals(testEmail, loginRequest.getEmail());
    }

    @Test
    void testSetAndGetPassword() {
        String testPassword = "securePassword123";
        loginRequest.setPassword(testPassword);
        assertEquals(testPassword, loginRequest.getPassword());
    }

    @Test
    void testFullConstructorAndGetters() {
        // Create a fully populated LoginRequest
        LoginRequest fullRequest = new LoginRequest();
        fullRequest.setEmail("user@example.com");
        fullRequest.setPassword("securePassword123");

        // Verify all getters
        assertEquals("user@example.com", fullRequest.getEmail());
        assertEquals("securePassword123", fullRequest.getPassword());
    }

    @Test
    void testToString() {
        // Verify that toString() is generated by Lombok
        LoginRequest fullRequest = new LoginRequest();
        fullRequest.setEmail("user@example.com");
        fullRequest.setPassword("securePassword123");

        String toStringResult = fullRequest.toString();
        assertNotNull(toStringResult);
        assertTrue(toStringResult.contains("email=user@example.com"));
        assertTrue(toStringResult.contains("password=securePassword123"));
    }

    @Test
    void testEqualsAndHashCode() {
        LoginRequest request1 = new LoginRequest();
        request1.setEmail("user@example.com");
        request1.setPassword("securePassword123");

        LoginRequest request2 = new LoginRequest();
        request2.setEmail("user@example.com");
        request2.setPassword("securePassword123");

        LoginRequest request3 = new LoginRequest();
        request3.setEmail("different@example.com");
        request3.setPassword("differentPassword");

        // Test equals
        assertEquals(request1, request2);
        assertNotEquals(request1, request3);

        // Test hashCode
        assertEquals(request1.hashCode(), request2.hashCode());
        assertNotEquals(request1.hashCode(), request3.hashCode());
    }

    @Test
    void testNullValues() {
        // Test setting null email
        loginRequest.setEmail(null);
        assertNull(loginRequest.getEmail());

        // Test setting null password
        loginRequest.setPassword(null);
        assertNull(loginRequest.getPassword());
    }

    @Test
    void testEmptyStringValues() {
        // Test setting empty email
        loginRequest.setEmail("");
        assertEquals("", loginRequest.getEmail());

        // Test setting empty password
        loginRequest.setPassword("");
        assertEquals("", loginRequest.getPassword());
    }
}